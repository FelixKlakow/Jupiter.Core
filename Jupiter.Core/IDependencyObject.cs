using System;
using System.Collections.Generic;
using System.Text;

namespace Jupiter
{
    /// <summary>
    /// Represents an object that participates in the dependency property system.
    /// </summary>
    /// <remarks>The objects must inherit from a class.</remarks>
    public interface IDependencyObject
    {
        #region #### EVENTS #############################################################
        /// <summary>
        /// Occurs when any <see cref="DependencyProperty"/> of the objects has been changed.
        /// </summary>
        event GenericEventHandler<IDependencyObject, PropertyChangedEventArgs> PropertyChanged;
        #endregion
        #region #### PROPERTIES #########################################################
        /// <summary>
        /// Retrieves a enumeration with <see cref="DependencyProperty"/> objects which has been attached to the current object.
        /// </summary>
        IEnumerable<DependencyProperty> AttachedProperties { get; }
        #endregion
        #region #### ADD CHANGE METHODS #################################################
        /// <summary>
        /// Adds a change handler for the specified <see cref="DependencyProperty"/>.
        /// </summary>
        /// <typeparam name="TProperty">The type of the property.</typeparam>
        /// <param name="property">The <see cref="DependencyProperty"/> to add the change handler to.</param>
        /// <param name="handler">The handler for the change event.</param>
        void AddChangeHandler<TProperty>(DependencyProperty<TProperty> property, GenericEventHandler<IDependencyObject, PropertyChangedEventArgs<TProperty>> handler);
        /// <summary>
        /// Removes a change handler from the specified <see cref="DependencyProperty"/>.
        /// </summary>
        /// <typeparam name="TProperty">The type of the property.</typeparam>
        /// <param name="property">The <see cref="DependencyProperty"/> to remove the change handler from.</param>
        /// <param name="handler">The handler of the change event which should be removed.</param>
        void RemoveChangeHandler<TProperty>(DependencyProperty<TProperty> property, GenericEventHandler<IDependencyObject, PropertyChangedEventArgs<TProperty>> handler);
        /// <summary>
        /// Adds a change handler for the specified <see cref="DependencyProperty"/>.
        /// </summary>
        /// <param name="property">The <see cref="DependencyProperty"/> to add the change handler to.</param>
        /// <param name="handler">The handler for the change event.</param>
        void AddChangeHandler(DependencyProperty property, GenericEventHandler<IDependencyObject, PropertyChangedEventArgs> handler);
        /// <summary>
        /// Removes a change handler from the specified <see cref="DependencyProperty"/>.
        /// </summary>
        /// <param name="property">The <see cref="DependencyProperty"/> to remove the change handler from.</param>
        /// <param name="handler">The handler of the change event which should be removed.</param>
        void RemoveChangeHandler(DependencyProperty property, GenericEventHandler<IDependencyObject, PropertyChangedEventArgs> handler);
        #endregion
        #region #### MARKUP METHODS #####################################################
        /// <summary>
        /// Set the value of the target property to a value provided by a <see cref="DependencyExpression"/> which is generated by the <see cref="DependencyExtension"/>.
        /// </summary>
        /// <param name="property">The <see cref="DependencyProperty"/> whichs value should be set.</param>
        /// <param name="extension">The <see cref="DependencyExtension"/> which provides provides the <see cref="DependencyExpression"/>.</param>
        void SetValueExtension(DependencyProperty property, DependencyExtension extension);
        /// <summary>
        /// Set the value of the target property to a value provided by a <see cref="DependencyExpression"/> which is generated by the <see cref="DependencyExtension"/>.
        /// </summary>
        /// <param name="propertyKey">The <see cref="DependencyPropertyKey"/> of the <see cref="DependencyProperty"/> whichs value should be set.</param>
        /// <param name="extension">The <see cref="DependencyExtension"/> which provides provides the <see cref="DependencyExpression"/>.</param>
        void SetValueExtension(DependencyPropertyKey propertyKey, DependencyExtension extension);
        /// <summary>
        /// Set the value of the target property to a value provided by a <see cref="DependencyExpression"/> which is generated by the <see cref="DependencyExtension"/> which overrides the current extension.
        /// </summary>
        /// <param name="property">The <see cref="DependencyProperty"/> whichs value should be set.</param>
        /// <param name="extension">The <see cref="DependencyExtension"/> which provides provides the <see cref="DependencyExpression"/>.</param>
        void SetValueExtensionOverride(DependencyProperty property, DependencyExtension extension);
        /// <summary>
        /// Set the value of the target property to a value provided by a <see cref="DependencyExpression"/> which is generated by the <see cref="DependencyExtension"/> which overrides the current extension.
        /// </summary>
        /// <param name="propertyKey">The <see cref="DependencyPropertyKey"/> of the <see cref="DependencyProperty"/> whichs value should be set.</param>
        /// <param name="extension">The <see cref="DependencyExtension"/> which provides provides the <see cref="DependencyExpression"/>.</param>
        void SetValueExtensionOverride(DependencyPropertyKey propertyKey, DependencyExtension extension);
        /// <summary>
        /// Gets the extension value of the specified <see cref="DependencyProperty"/>.
        /// </summary>
        /// <param name="property">The property to get the extension for.</param>
        /// <returns>The <see cref="DependencyExtension"/> which is assigned to the property; If no <see cref="DependencyExtension"/> is assigned it returns null.</returns>
        DependencyExtension GetValueExtension(DependencyProperty property);
        /// <summary>
        /// Gets the <see cref="DependencyExpression"/> which has been created by the assigned <see cref="DependencyExtension"/>.
        /// </summary>
        /// <param name="property">The <see cref="DependencyProperty"/> for which the <see cref="DependencyExpression"/> should be retrieved.</param>
        /// <returns>The <see cref="DependencyExpression"/> of the property; or null if no <see cref="DependencyExtension"/> has been assigned.</returns>
        DependencyExpression GetValueExpression(DependencyProperty property);
        /// <summary>
        /// Gets the extension override value of the specified <see cref="DependencyProperty"/>.
        /// </summary>
        /// <param name="property">The property to get the extension for.</param>
        /// <returns>The <see cref="DependencyExtension"/> which is assigned to the property; If no <see cref="DependencyExtension"/> is assigned it returns null.</returns>
        DependencyExtension GetValueExtensionOverride(DependencyProperty property);
        /// <summary>
        /// Gets the <see cref="DependencyExpression"/> which has been created by the assigned <see cref="DependencyExtension"/> which is overriding the value.
        /// </summary>
        /// <param name="property">The <see cref="DependencyProperty"/> for which the <see cref="DependencyExpression"/> should be retrieved.</param>
        /// <returns>The <see cref="DependencyExpression"/> of the property; or null if no <see cref="DependencyExtension"/> has been assigned.</returns>
        DependencyExpression GetValueExpressionOverride(DependencyProperty property);
        #endregion
        #region #### PROPERTY METHODS ###################################################
        /// <summary>
        /// Coerces the value of the specified property.
        /// </summary>
        /// <param name="property">The <see cref="DependencyProperty"/> to coerce.</param>
        void CoerceValue(DependencyProperty property);
        /// <summary>
        /// Clears the value of the property to the default value.
        /// </summary>
        /// <param name="property">The <see cref="DependencyProperty"/> to clear.</param>
        void ClearValue(DependencyProperty property);
        /// <summary>
        /// Clears the value of the property to the default value.
        /// </summary>
        /// <param name="propertyKey">The <see cref="DependencyPropertyKey"/> of the <see cref="DependencyProperty"/> which should be cleared.</param>
        void ClearValue(DependencyPropertyKey propertyKey);
        /// <summary>
        /// Sets the value of the specified property.
        /// </summary>
        /// <param name="property">The <see cref="DependencyProperty"/> whichs value should be set.</param>
        /// <param name="value">The new value of the property.</param>
        void SetValue(DependencyProperty property, Object value);
        /// <summary>
        /// Sets the value of the specified property.
        /// </summary>
        /// <typeparam name="TProperty">The type of the property.</typeparam>
        /// <param name="property">The <see cref="DependencyProperty{TPropertyType}"/> whichs value should be set.</param>
        /// <param name="value">The new value of the property.</param>
        void SetValue<TProperty>(DependencyProperty<TProperty> property, TProperty value);
        /// <summary>
        /// Sets the value of the specified property.
        /// </summary>
        /// <param name="propertyKey">The <see cref="DependencyPropertyKey"/> of the <see cref="DependencyProperty"/> whichs value should be set.</param>
        /// <param name="value">The new value of the property.</param>
        void SetValue(DependencyPropertyKey propertyKey, Object value);
        /// <summary>
        /// Sets the value of the specified property.
        /// </summary>
        /// <typeparam name="TProperty">The type of the property.</typeparam>
        /// <param name="propertyKey">The <see cref="DependencyPropertyKey{TPropertyType}"/> of the <see cref="DependencyProperty"/>  whichs value should be set.</param>
        /// <param name="value">The new value of the property.</param>
        void SetValue<TProperty>(DependencyPropertyKey<TProperty> propertyKey, TProperty value);
        /// <summary>
        /// Gets the value of the dependency property.
        /// </summary>
        /// <param name="property">The <see cref="DependencyProperty"/> to get the value for.</param>
        /// <returns>The value of the property.</returns>
        Object GetValue(DependencyProperty property);
        /// <summary>
        /// Gets the value of the dependency property.
        /// </summary>
        /// <typeparam name="TProperty">The type of the property.</typeparam>
        /// <param name="property">The <see cref="DependencyProperty{TPropertyType}"/> to get the value for.</param>
        /// <returns>The value of the property.</returns>
        TProperty GetValue<TProperty>(DependencyProperty<TProperty> property);
        /// <summary>
        /// Gets the base value of the specified property.
        /// </summary>
        /// <param name="property">The <see cref="DependencyProperty"/> to get the base value for.</param>
        /// <returns>The base value of the property.</returns>
        Object GetBaseValue(DependencyProperty property);
        /// <summary>
        /// Gets the base value of the specified property.
        /// </summary>
        /// <typeparam name="TProperty">The type of the property.</typeparam>
        /// <param name="property">The <see cref="DependencyProperty{TPropertyType}"/> to get the base value for.</param>
        /// <returns>The base value of the property.</returns>
        TProperty GetBaseValue<TProperty>(DependencyProperty<TProperty> property);
        #endregion
    }
}
